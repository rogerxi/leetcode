class Solution(object):
    def kthSmallest(self, matrix, k):
        """
        :type matrix: List[List[int]]
        :type k: int
        :rtype: int
        """
        # Use priority queue.
        # Time complexity:  O(klogn).
        # Space complexity: O(n).
        from heapq import heappush, heappop, heapify

        if matrix:
            n = len(matrix)
            queue = [(matrix[i][0], i, 0) for i in range(n)]
            heapify(queue)
            while k > 0:
                k -= 1
                _, row, col = heappop(queue)
                if col < n - 1:
                    heappush(queue, (matrix[row][col + 1], row, col + 1))

            return matrix[row][col]



Another efficient algorithm: Selection in X + Y and matrices with sorted rows and columns.

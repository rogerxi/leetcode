class Solution(object):
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
#         # DFS.
#         def recurse(candidates, target):
#             if target == 0:
#                 return [[]]
#             elif not candidates or candidates[0] > target:
#                 return []
#             elif candidates[0] == target:
#                 return [[target]]

#             solution_set = []
#             for i in xrange(target / candidates[0] + 1):
#                 for s in recurse(candidates[1:], target - candidates[0] * i):
#                     solution_set.append([candidates[0]] * i + s)

#             return solution_set

#         candidates.sort()
#         return recurse(candidates, target)



        # DFS improved?? Seems the performance is worse.
        def recurse(target, index, path, solution_set):
            if target == 0:
                solution_set.append(path)
                return
            elif target < 0:
                return

            for i in xrange(index, self.length):
                recurse(target - candidates[i], i, path + [candidates[i]], solution_set)

        candidates.sort()
        self.length = len(candidates)
        solution_set = []
        recurse(target, 0, [], solution_set)
        return solution_set

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def pathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: int
        """
#         # O(nlogn) time complexity.
#         def recurse(node, sum_counter):
#             if not node:
#                 return

#             sum_counter_new = dict()
#             for c in sum_counter:
#                 sum_counter_new[c + node.val] = sum_counter[c]

#             sum_counter_new[node.val] = sum_counter_new.get(node.val, 0) + 1
#             self.count += sum_counter_new.get(sum, 0)
#             recurse(node.left, sum_counter_new)
#             recurse(node.right, sum_counter_new)

#         self.count = 0
#         recurse(root, dict())
#         return self.count



        # Great idea - cache the accumulated sum.
        # O(n) time complexity.
        def recurse(node, acc_sum, acc_sum_counter):
            if node:
                acc_sum += node.val
                self.count += acc_sum_counter.get(acc_sum - sum, 0)
                acc_sum_counter[acc_sum] = acc_sum_counter.get(acc_sum, 0) + 1
                recurse(node.left, acc_sum, acc_sum_counter)
                recurse(node.right, acc_sum, acc_sum_counter)
                acc_sum_counter[acc_sum] -= 1

        self.count = 0
        recurse(root, 0, {0: 1})
        return self.count

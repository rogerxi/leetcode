class Solution(object):
    def firstMissingPositive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
#         # For each number in nums, set nums[number] to True, and then get the first index which does not equal to True.
#         length = len(nums)
#         for num in nums:
#             num_temp = num
#             while num_temp is not True and 0 < num_temp <= length:
#                 # num_temp, nums[num_temp - 1] = nums[num_temp - 1], True   # It does not work???????
#                 nums[num_temp - 1], num_temp = True, nums[num_temp - 1]

#         for i in range(length):
#             if nums[i] is not True:
#                 return i + 1

#         return length + 1



        # For each number in nums, set nums[number] to number, and then get the first number which does not equal to the index.
        length = len(nums)
        for i in range(length):
            while 0 < nums[i] <= length and nums[nums[i] - 1] != nums[i]:
                # nums[i], nums[nums[i] - 1] = nums[nums[i] - 1], nums[i]       # It does not work???????
                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]

        for i in range(length):
            if nums[i] != i + 1:
                return i + 1

        return length + 1

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        def verify_tree(node):
            if not node:
                return 0, 0, True

            min_val = max_val = node.val
            if node.left:
                min_left, max_left, valid_left = verify_tree(node.left)
                if not valid_left or node.val <= max_left:
                    return 0, 0, False

                min_val = min(min_val, min_left)

            if node.right:
                min_right, max_right, valid_right = verify_tree(node.right)
                if not valid_right or node.val >= min_right:
                    return 0, 0, False

                max_val = max(max_val, max_right)

            return min_val, max_val, True

        return verify_tree(root)[2]

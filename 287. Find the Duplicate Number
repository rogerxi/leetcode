class Solution(object):
    def findDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
#         # O(nlogn) time complexity, O(1) sapce complexity.
#         low, high = 1, len(nums)
#         while low < high:
#             mid = (low + high) / 2
#             if len([i for i in nums if low <= i <= mid]) > mid - low + 1:
#                 high = mid
#             else:
#                 low = mid + 1

#         return low



        # Smart idea from Discuss: similar to finding circle in a linked list.
        # O(n) time complexity, O(1) sapce complexity.
        length = len(nums)
        slow, fast = length, nums[nums[length - 1] - 1]     # Fast is as twice speedy as slow.
        while slow != fast:
            slow = nums[slow - 1]
            fast = nums[nums[fast - 1] - 1]

        slow = length
        fast = nums[nums[fast - 1] - 1]
        while slow != fast:
            slow = nums[slow - 1]
            fast = nums[fast - 1]

        return slow

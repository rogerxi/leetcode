class Solution(object):
    def setZeroes(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: void Do not return anything, modify matrix in-place instead.
        """
#         # O(n^2) Time, O(n) Space.
#         if matrix:
#             m, n = len(matrix), len(matrix[0])
#             rows_to_set, cols_to_set = set(), set()
#             for i in range(m):
#                 cols = set(range(n)) - cols_to_set
#                 if not cols:
#                     break

#                 for j in range(n):
#                     if matrix[i][j] == 0:
#                         rows_to_set.add(i)
#                         cols_to_set.add(j)

#             for i in rows_to_set:
#                 for j in range(n):
#                     matrix[i][j] = 0

#             for j in cols_to_set:
#                 for i in range(m):
#                     matrix[i][j] = 0



        # O(n^2) Time, O(1) Space.
        if matrix:
            m, n = len(matrix), len(matrix[0])
            first_row = any(matrix[0][j] == 0 for j in range(n))
            first_col = any(matrix[i][0] == 0 for i in range(m))
            for i in range(m):
                for j in range(n):
                    if matrix[i][j] == 0:
                        matrix[i][0] = matrix[0][j] = True

            for i in range(1, m):
                for j in range(1, n):
                    if matrix[i][0] is True or matrix[0][j] is True:
                        matrix[i][j] = 0

            for j in range(n):
                if first_row or matrix[0][j] is True:
                    matrix[0][j] = 0

            for i in range(m):
                if first_col or matrix[i][0] is True:
                    matrix[i][0] = 0

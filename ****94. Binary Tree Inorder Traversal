# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
#         # Recursive solution.
#         if not root:
#             return []

#         return self.inorderTraversal(root.left) + [root.val] + self.inorderTraversal(root.right)



        # Iterative solution.
        if not root:
            return []

        stack = [(root, False)]
        inorder_traversal = []
        while stack:
            node, accessed = stack.pop()
            if accessed:
                inorder_traversal.append(node.val)
            else:
                if node.right:
                    stack.append((node.right, False))
                stack.append((node, True))
                if node.left:
                    stack.append((node.left, False))

        return inorder_traversal

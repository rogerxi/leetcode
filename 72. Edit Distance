class Solution(object):
    def minDistance(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        # DP. Assume two strings A and B:
        # if A[-1] == B[-1]:
        #    operations(A, B) == operations(A[:-1], B[:-1])
        # else:
        #    if operations(A[:-1], B[:-1]) < both operations(A, B[:-1]) and operations(A[:-1], B):
        #       Do "Replace" operation.
        #    else:
        #       Do "Insert" or "Delete" operation.
        #
        # Time complexity:      O(mn).
        # Space complexity:     O(mn).
        length1, length2 = len(word1), len(word2)
        distances = [[i + j if i * j == 0 else 0 for j in xrange(length2 + 1)] for i in xrange(length1 + 1)]
        for i in xrange(1, length1 + 1):
            for j in xrange(1, length2 + 1):
                if word1[i - 1] == word2[j - 1]:
                    distances[i][j] = distances[i - 1][j - 1]
                else:
                    distances[i][j] = min([distances[i - 1][j - 1], distances[i - 1][j], distances[i][j - 1]]) + 1

        return distances[length1][length2]
